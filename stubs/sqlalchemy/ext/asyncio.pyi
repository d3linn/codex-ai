from typing import Any, Protocol

class AsyncSession:
    async def __aenter__(self) -> "AsyncSession": ...
    async def __aexit__(self, exc_type: Any, exc: Any, tb: Any) -> None: ...
    async def execute(self, statement: Any, *args: Any, **kwargs: Any) -> Any: ...
    async def scalars(self, statement: Any, *args: Any, **kwargs: Any) -> Any: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def refresh(self, instance: Any) -> None: ...
    async def get(self, entity: Any, ident: Any, *, options: Any | None = ...) -> Any: ...
    async def delete(self, instance: Any) -> None: ...
    def add(self, instance: Any) -> None: ...

class _SessionFactory(Protocol):
    def __call__(self, *args: Any, **kwargs: Any) -> AsyncSession: ...

    async def __aenter__(self) -> AsyncSession: ...
    async def __aexit__(self, exc_type: Any, exc: Any, tb: Any) -> None: ...


def async_sessionmaker(*args: Any, **kwargs: Any) -> _SessionFactory: ...

def create_async_engine(url: str, *args: Any, **kwargs: Any) -> Any: ...
